buildscript {
    ext {
        global_version = '2.2.0'

        kotlin_version = '1.6.0'
        spring_boot_version= '2.6.0'

        maven_repo = System.getenv("MAVEN_PROXY") ?: 'https://maven.aliyun.com/nexus/content/groups/public/'
        publishing_plugin_version = '1.1.0'

        exposed_version = '0.36.2'

        infra_bom_version = '2.2.0'

        infra_orm_version = '1.0.0'
        ksp_version = '1.6.0-1.0.1'
    }
    repositories {
        mavenLocal()
        if (maven_repo != null) {
            maven {
                url maven_repo
                allowInsecureProtocol true
            }
        }
        mavenCentral()
        maven { url 'https://repo.spring.io/plugins-snapshot' }
    }
}

plugins {
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlin_version"  apply false
    id "org.springframework.boot" version "$spring_boot_version" apply false
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version" apply false
    id "io.github.gradle-nexus.publish-plugin" version "$publishing_plugin_version" apply false
}

apply plugin: 'io.github.gradle-nexus.publish-plugin'

static Boolean isNotNullOrBlank(Object s) {
    return !(s == null || s.toString().trim().length() == 0)
}

static canBeSign(Project project) {
    return isNotNullOrBlank(project.findProperty("signing.password")) &&
            isNotNullOrBlank(project.findProperty('signing.secretKeyRingFile')) &&
            isNotNullOrBlank(project.findProperty('signing.keyId'))
}

static getPropertyOrCmdArgs(Project project, String propertyName, String cmdArgName) {
    def propertyValue = project.hasProperty(propertyName) ? project.property(propertyName).toString() : null
    def v = (System.properties.getProperty(cmdArgName) ?: propertyValue) ?: System.getenv(propertyName)
    return isNotNullOrBlank(v) ? v : null
}

allprojects {
    group = 'com.labijie.infra'
    version = global_version

    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'java-library'

    if(!project.name.startsWith("dummy") && project.name != "oauth2-resource-token-starter") {
        apply plugin: 'maven-publish'
        apply plugin: 'signing'
    }



    compileJava.options.encoding = "UTF-8"
    javadoc.options.encoding = "UTF-8"

    group = project.rootProject.group
    version = global_version

    sourceCompatibility = 1.8

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }


    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        failOnError = false
    }

    repositories {
        mavenLocal()
        if (maven_repo != null) {
            maven {
                url maven_repo
                allowInsecureProtocol true
            }
        }
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }

    test {
        useJUnitPlatform()
    }


    dependencies {
        implementation platform("com.labijie.bom:lib-dependencies:$infra_bom_version")

        api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testImplementation "org.mockito:mockito-all"
        testImplementation "com.labijie.orm:exposed-test-starter:$infra_orm_version"
    }
}


subprojects {
    def u = getPropertyOrCmdArgs(project, "PUB_USER", "u")
    def p = getPropertyOrCmdArgs(project, "PUB_PWD", "p")
    def s = getPropertyOrCmdArgs(project, "PUB_URL", "s")
    if (!project.name.startsWith("dummy")) {

        publishing {
            publications {
                mavenJava(MavenPublication) {

                    artifactId = project.name == "core" ? "commons" : "commons-" + project.name
                    from((components.findByName("javaPlatform") ?: components.findByName("java")))
                    pom {
                        name = project.name
                        description = 'infrastructure library'
                        url = 'https://github.com/hongque-pro/infra-commons'
//                    properties = [
//                            myProp: "value",
//                            "prop.with.dots": "anotherValue"
//                    ]
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                id = 'labijie infra team'
                                name = 'infra team'
                                email = 'tech@labijie.com'
                            }
                        }
                        scm {
                            url = 'https://github.com/hongque-pro/infra-commons'
                            connection = 'scm:git@github.com:hongque-pro/infra-commons.git'
                            developerConnection = 'git@github.com:hongque-pro/infra-commons.git'
                        }
                    }
                }
            }

            signing {
                if (canBeSign(project)) {
                    sign publishing.publications.mavenJava
                } else {
                    println "Signing information missing/incomplete for ${project.name}"
                }
            }

            repositories {
                // publish to private nexus
                // gradle -Du="username" -Dp='password' -Ds='http://your-nexus-address/repository/maven-releases/' publishMavenJavaPublicationToNexusRepository
                if (isNotNullOrBlank(u) && isNotNullOrBlank(p) && isNotNullOrBlank(s)) {
                    maven {
                        name = "nexus"
                        url = s
                        credentials {
                            username = u
                            password = p
                        }
                    }
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            def u = getPropertyOrCmdArgs(project, "PUB_USER", "u")
            def p = getPropertyOrCmdArgs(project, "PUB_PWD", "p")
            username = u
            password = p
        }
    }
}


